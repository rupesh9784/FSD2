//L001
 // printDecreasing
   public static void printDecresasing(int n){
      if(n==0) {
        return;
      }

      System.out.println(n);
      printDecresasing(n-1);  //faith 4 3 2 1
   }

//print Increasing
 public static void printIncresasing(int n){
       if(n==0) return;

       printIncresasing(n-1);  //faith 4 3 2 1
       System.out.println(n);
   }

// print decreasing increasing
 public static void printDecIncresasing(int n){
       if(n==0) return;

       System.out.println(n);
       printDecIncresasing(n-1);  //faith 4 3 2 1 1 2 3 4
       System.out.println(n);
   }

// find factorial
 public static int fact(int n){
    if(n==0){
        return 1;
    }

     int ans =  fact(n-1);
     int fans = ans * n;
     return fans;
  }

*************************************
//L002
// power Linear
  public static int powLo(int x , int n){
       if(n==0) return 1;
        
       int nm1 = powLo( x , n-1);
       
      return nm1 * x;
   }

// power logarithmic

  public static int powLo(int x , int n){
       if(n==0) return 1;
        
       int nb2 = powLo( x , n/2);
       int ans = nb2 * nb2;
       if(n%2 == 1){
        ans = ans *x;
       }
      return ans;
   }
//leetcode 50
class Solution {
    public double myPow(double x, int n) {
        if(n>0){
            return rec(x,n);
        } else {
            double p = rec(x,-n);
            return 1d/p;
        }
    }
    public double rec(double x ,int n){
        if(n==0) return 1D;
        
        double p = rec(x,n/2);
        p = n%2==0 ? p*p : p*p*x;
        return p;
    }
}

// rec two call
 public static void rec(int n){
        if(n==0) return;

        System.out.print(n+" ");
        rec(n-1);
        System.out.print(n+" ");
        rec(n-1);
        System.out.print(n+" ");

    }
******************************************************
//L003

//display array
 public static void main(String[] args) {
        int[] arr = {10,20,30,40,50,60,70};

       displayArr(arr , 0);  //call 
    }
    public static void displayArr(int[] arr ,int i ){
        if(i == arr.length) return;
     
        System.out.print(arr[i] +" ");
        displayArr(arr, i+1);  //call
    }

//display array in reverse Order

public static void main(String[] args) {
        int[] arr = {10,20,30,40,50,60,70};

       displayRevArr(arr , 0);  //call 
    }
    public static void displayRevArr(int[] arr ,int i ){
        if(i == arr.length) return;
     
        displayRevArr(arr, i+1);  //call
        System.out.print(arr[i] +" ");
    }

// find max element
 public static void main(String[] args) {
        int[] arr = {2,23,58,34,12};
        int ans = maxELement(arr , 0);
        System.out.println(ans);
    }
    public static int maxELement(int[] arr , int idx){
       if(idx == arr.length) {
         return Integer.MIN_VALUE;
       }

       int val = maxELement(arr , idx+1);
       if(arr[idx] > val) return arr[idx];
       else return val;
    }

//find first Occurence of an element
public static void main(String[] args) {
        int[] arr = {3,2,5,2,2,6};
        int x = 2;
        int ans = firstOccurence(arr , 0 , x);
        System.out.println(ans);
    }
    public static int firstOccurence(int[] arr,int idx,int x){
        if(idx==arr.length) return -1; 
        int ans = firstOccurence(arr, idx+1, x);
        if(arr[idx] == x) {
            return idx;
        }
        return ans;
    }


// fin all indices
public class FindAllInd {
    public static void main(String[] args) {
        int[] arr = {5,2,3,2,2,6};
        int ele = 2;
        int[] ans = findAllIndices(arr,ele,0,0);
        for(int e : ans) System.out.print(e+" ");
    }
  public static int[] findAllIndices(int[] arr,int ele,int idx , int s){
   if(arr.length == idx){
     int[] ans = new int[s];
     return ans;
   }  
   int[] a;
   if(arr[idx] == ele){
    a = findAllIndices(arr, ele, idx+1, s+1);
   } else {
    a = findAllIndices(arr, ele, idx+1, s);
   }
   if(arr[idx] == ele){
     a[s] = idx;
   }
 return a;
}
}


//L005
//subsequence
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

class Solution {
    public static ArrayList<String> subsequences(String str) {
        // Write your code here
         ArrayList<String> ans =   rec(str);
          ans.remove(0);
        return ans; 
    }
    public static ArrayList<String> rec(String str){
       if(str.length() == 0){
          ArrayList<String> base = new ArrayList<>();
          base.add("");
          return base;
       }

       char ch = str.charAt(0);
       String ss = str.substring(1);
       ArrayList<String> faith =  rec(ss);
       ArrayList<String> ans = new ArrayList<>();
       for(String s : faith){
           ans.add(s);
       }
       for(String s : faith){
           ans.add(ch + s);
       }
        return ans; 
    }

//Stair Path
import java.util.*;
public class StairP {
    public static void main(String[] args) {
        int n  = 4;
        ArrayList<String> path =  rec(n);
        System.out.println(path);
    }

    public static ArrayList<String> rec(int n){
        if(n<0) return new ArrayList<>();
        if(n ==0){
        ArrayList<String> base = new ArrayList<>();
        base.add("");
        return base;
       }   
       ArrayList<String> path1 =   rec(n-1);
        ArrayList<String> path2 =   rec(n-2);
        ArrayList<String> path3 =   rec(n-3);
        ArrayList<String> ans = new ArrayList<>();
        for(String s : path1) ans.add("1" + s);  
        for(String s : path2) ans.add("2" + s);
        for(String s : path3) ans.add("3" + s);
        
        return ans;
    }
}

//L006

//Maze path
import java.util.*;
public class Maze {
    public static void main(String[] args) {
        int n = 3;
        ArrayList<String> fans = mazePath(0 , 0 , n-1 , n-1);
        System.out.println(fans);
    }
    public static ArrayList<String> mazePath(int sr ,int sc , int dr , int dc){
      if(sr>dr || sc > dc) return new ArrayList<>();
      if(sr == dr && sc == dc){
       ArrayList<String> base = new ArrayList<>();
       base.add("");
       return base;
      }
      ArrayList<String> hor =  mazePath(sr , sc+1 , dr,dc);
      ArrayList<String> ver= mazePath(sr+1 , sc , dr,dc);
      ArrayList<String> ans = new ArrayList<>();
      for(String s : hor){
        ans.add("h" + s);
      }
      for(String s : ver){
        ans.add("v" + s);
      }
       return ans; 
    }
}

//Bottom to top apprach
//subsequence
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

class Solution {
    public static ArrayList<String> subsequences(String str) {
        ArrayList<String> collect = new ArrayList<>();
         rec(str , "" ,collect); //call
         return collect;
        
    }
    public static void rec(String str,String ans,ArrayList<String> collect){
        if(str.length() == 0){
            if(ans != ""){
               collect.add(ans);
            }
           return; 
        }
        String ss = str.substring(1);
        char ch = str.charAt(0);
         rec(ss ,ans , collect );  //exclude
         rec(ss ,ans+ch,collect ); //include
        
    }
}

//L007
//Letter Combinations of a Phone Number
class Solution {
    public List<String> letterCombinations(String digits) {
          
     String[] code = {"" , "" , "abc" , "def" , "ghi" , "jkl" , "mno" ,"pqrs" , "tuv" ,"wxyz" };
        List<String> collect = new ArrayList<>();
        if(digits.length() == 0) return collect;
         rec(digits , code, "" , collect);
        return collect;
        
    }
    public void rec(String dig , String[] code , String ans , List<String> collect) {
       if(dig.length() == 0){
           collect.add(ans);
           return;
       }
        
        
       char ch = dig.charAt(0);
        String ss = dig.substring(1);
        String s = code[ch-'0'];
        for(int i =0; i<s.length(); i++){
            char c = s.charAt(i);
            rec( ss , code ,ans + c, collect);
        }
        
    }
    
}

//L008
//rat in a maze path
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> collect = new ArrayList<>();
        rec(0,0,n-1, "" , m , collect);
        return collect;
        
    }
    public static void rec(int sr , int sc , int dest, String ans 
    ,int[][] arr , ArrayList<String> collect ){
        if(sr<0 || sc<0 || sr == dest+1 || sc == dest + 1 || arr[sr][sc] == 0){
            return ;
        }
        if(sr==dest && sc==dest){
            collect.add(ans);
            return;
        }
        
        arr[sr][sc] = 0;  //mark
        rec(sr+1,sc,dest,ans+"D", arr , collect);  //down
        rec(sr,sc-1,dest,ans+"L", arr , collect);  //left
        rec(sr,sc+1,dest,ans+"R", arr , collect);  //right
        rec(sr-1,sc,dest,ans+"U", arr , collect);  //right
        arr[sr][sc] = 1; //unmark
        
    }
    
}

//n queen

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> collect = new ArrayList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        int[][] arr = new int[n][n];
        rec(0 ,n, arr , ans , collect);
        return collect;
        
    }
    public static void rec(int r ,int n, int[][] arr,ArrayList<Integer> ans,ArrayList<ArrayList<Integer>> collect){
      if(r==n){
          ArrayList<Integer> a = new ArrayList<>(ans);
          collect.add(a);
          return;
      }
        
      for(int c = 0; c<n; c++){
        if(isQueenPlaced(arr,r,c)){
            arr[r][c] = 1; //mark
            ans.add(c+1);
            rec(r+1 ,n,arr,ans,collect);
            arr[r][c] = 0; //unmark
            ans.remove(ans.size()-1);
            
        } 
      }  
        
    }
    
    static boolean isQueenPlaced(int[][] arr , int i , int j){
        //left
        for(int c = j-1; c>=0; c--){
            if(arr[i][c] == 1) return false;
        }
        //rightdiag
        for(int r=i-1,c=j+1 ; r>=0 && c<arr.length; r--,c++){
            if(arr[r][c] == 1) return false;
        }
        //up
        for(int r = i-1; r>=0; r--){
            if(arr[r][j] == 1) return false;
        }
        //leftdiag
        for(int r=i-1,c=j-1 ; r>=0 && c>=0; r--,c--){
            if(arr[r][c] == 1) return false;
        }
        
        return true;
        
    }
}

