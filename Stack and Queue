
//deque
class MyCircularDeque {
    int[] arr;
    int front;
    int rear;
    int size;

    public MyCircularDeque(int k) {
        arr = new int[k];
        front = 0;
        rear = 1;
        size = 0;
    }
    
    public boolean insertFront(int value) {
        if(size==arr.length) return false;
        arr[front--]= value;
        if(front == -1) front = arr.length-1;
        size++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(size==arr.length) return false;
        arr[rear++] = value;
        if(rear == arr.length) rear = 0;
        size++;
        return true;
    }
    
    public boolean deleteFront() {
        if(size==0) return false;
        front++;
        if(front==arr.length){
            front = 0;
        }
        size--;
        return true;
    }
    
    public boolean deleteLast() {
        if(size==0) return false;
        rear--;
        if(rear == -1){
            rear = arr.length-1;
        }
        size--;
        return true;
    }
    
    public int getFront() {
        if(size == 0) return -1;
        if(front == arr.length-1) {
            return arr[0];
        } else {
            return arr[front+1];
        }
    }
    
    public int getRear() {
        if(size==0) return -1;
        if(rear == 0){
            return arr[arr.length-1];
        } else{
            return arr[rear-1];
        }
    }
    
    public boolean isEmpty() {
        if(size==0) return true;
        else return false;
    }
    
    public boolean isFull() {
        if(size==arr.length) return true;
        return false;
    }
}

