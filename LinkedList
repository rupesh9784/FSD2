//L001

class Node{
      int val;
      Node next;
      Node(int v){
        val = v;
      }  
    }
class MyLinkedList{
     Node head;
     int s;
     MyLinkedList(){
        head = null;
        s= 0;
     }
     public void display(){
        Node temp  = head;
        while(temp != null){
            System.out.print(temp.val+" ");
            temp = temp.next;
        }
       System.out.println();
     }
     public void addAtHead(int v){
        Node n = new Node(v);
        if(s==0){
            head = n;
        } else {
            n.next = head;
            head = n;
        }
        s++;
     }
     public void addAtTail(int v) {
        Node n = new Node(v);
        if(head==null){
            head = n;
        }else{
          Node temp = head;
          while(temp.next != null){
            temp = temp.next;
          }
          temp.next = n;
        }
        s++;
    } 
   }
public class IntroLL {
    public static void main(String[] args) {
        MyLinkedList LL = new MyLinkedList();
        LL.addAtHead(10);
        LL.addAtHead(20);
        LL.addAtHead(30);
        LL.display();
        LL.addAtTail(40);
        LL.addAtTail(50);
        LL.display();
    }
}


//L002

//Leetcode 707
class Node{
    int val;
    Node next;
    Node(int v){
      val = v;
    }  
  }
class MyLinkedList {
   Node head;
   int s;
   public MyLinkedList(){
      head = null;
      s= 0;
   }
   public void display(){
      Node temp  = head;
      while(temp != null){
          System.out.print(temp.val+" ");
          temp = temp.next;
      }
     System.out.println();
   }
   public void addAtHead(int v){
      Node n = new Node(v);
      if(s==0){
          head = n;
      } else {
          n.next = head;
          head = n;
      }
      s++;
   }
   public void addAtTail(int v) {
      Node n = new Node(v);
      if(head==null){
          head = n;
      }else{
        Node temp = head;
        while(temp.next != null){
          temp = temp.next;
        }
        temp.next = n;
      }
      s++;
  } 
  public void addAtIndex(int index, int val) {
      if(index<0 || index>s){
        return;
      } else if(index==0) addAtHead(val);
      else if(index == s) addAtTail(val);
      else{
       Node temp = head;
       while(index-->1) temp = temp.next;
       
       Node n = new Node(val);
       n.next = temp.next;
      temp.next = n;
       s++;
      }
  }
  public int get(int index) {
       if(index <0 || index>=s) return -1;
       Node temp = head;
       while(index-->0){
        temp = temp.next;
        
       }
       return temp.val;
  }
    
   public void deleteAtIndex(int index) {
        if(index<0 || index>=s) return;
        if(index == 0){
            head = head.next;
            s--;
        } else {
            Node temp = head;
            while(index-->1) temp = temp.next;
            temp.next = temp.next.next;
            s--;
        }
    }
}

//mid of the linkedlist
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast =fast.next.next;
        }
        return slow;
    }
}


//***********************************************
//L005

//isCycle
 boolean isCircular(Node head)
    {

   Node slow = head;
   Node fast = head;
   while(fast != null && fast.next != null){
       slow = slow.next;
       fast = fast.next.next;
       if(slow == fast) return true;
   }
   return false;
    }

//Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
         if(head == null || head.next == null) return;
        Node slow = head , fast = head , prev = null;
        while(fast != null && fast.next != null){
             prev = slow;
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                
                Node curr = head;
                while(curr != slow){
                    prev = slow;
                    curr = curr.next;
                    slow = slow.next;
                }
                prev.next = null;
                return;
                
            }
        }
    
    }
//isPlaindrome
 public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        
        ListNode s = head , f = head;
        while(f != null && f.next != null && f.next.next != null){
            s = s.next;
            f = f.next.next;
        }
        
        ListNode curr = s.next;
        s.next = null;
        
        ListNode prev = null;
        while(curr != null){
            ListNode forw = curr.next;
            curr.next = prev;
            prev = curr;
            curr = forw;
        }
        ListNode p1 = head, p2 = prev;
        while(p1 != null && p2 !=null){
            if(p1.val != p2.val) return false;
            p1 = p1.next;
            p2 = p2.next;
        }
        return true;
        
    }

// LinkedList cycle 2
public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null) return null;
        ListNode slow = head , fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                ListNode curr = head;
                while(curr != slow){
                    curr = curr.next;
                    slow = slow.next;
                }
                return curr;
                
            }
        }
        return null;
    }

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */


