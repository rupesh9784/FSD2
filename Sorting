//bubble sort
	public static void bubbleSort(int arr[], int n)
    {
        //code here
        boolean flag = true;
        for(int itr = 1; itr<n; itr++){
            flag = true;
            for(int i = 0; i<=n-1-itr; i++){
                if(arr[i] > arr[i+1]){
                    flag = false;
                    int t = arr[i];
                    arr[i] = arr[i+1];
                    arr[i+1] = t;
                }
            }
            if(flag == true) return;
            
        }
    }

//selection sort
	int  select(int arr[], int i)
	{
        // code here such that selectionSort() sorts arr[]
        int midx = i;
        for(int j = i+1; j<arr.length; j++){
            if(arr[j] < arr[midx]){
                midx = j;
            }
        }
        return midx;
        
	}
	
	void selectionSort(int arr[], int n)
	{
	    //code here
	    for(int i = 0; i<n-1; i++){
	      int midx =   select(arr , i);
	        int t = arr[i];
	        arr[i] = arr[midx];
	        arr[midx] = t;
	    }
	}
//insertion sort
static void insert(int arr[],int i)
  {
       // Your code here
       for(int j = i; j>=1; j--){
           if(arr[j] < arr[j-1]){
               int t = arr[j];
               arr[j] = arr[j-1];
               arr[j-1] = t;
           } else {
               break;
           }
           
       }
  }
  //Function to sort the array using insertion sort algorithm.
  public void insertionSort(int arr[], int n)
  {
      for(int i = 1; i<n; i++){
          insert(arr , i);
      }
  }

//merge two sorted array
 public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0, j = 0, k = 0;
        int[] ans = new int[m+n];
        while(i<m && j<n){
            if(nums1[i] < nums2[j]) ans[k++] = nums1[i++];
            else ans[k++] = nums2[j++]; 
        }
        while(i<m) ans[k++] = nums1[i++];
        while(j<n) ans[k++] = nums2[j++];
        i=0;
        for(int ele : ans) nums1[i++] = ele;
    }
//merge sort
class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
         // Your code here
         int n1 = m-l+1;
         int n2 = r-m;
         int[] a1 = new int[n1];
         int[] a2 = new int[n2];
         for(int i = 0; i<n1; i++) a1[i] = arr[l+i];
         for(int i = 0; i<n2; i++) a2[i] = arr[m+1+i];
         
         int i =0,j=0,k=l;
         while(i<n1 && j<n2){
            if(a1[i] < a2[j])  arr[k++] = a1[i++];
            else arr[k++] = a2[j++];
         }
         while(i<n1) arr[k++] = a1[i++];
         while(j<n2) arr[k++] = a2[j++];
        
    }
    void mergeSort(int arr[], int l, int r)
    {
        if(l<r){
             
             int m = (l+r)/2;
             mergeSort(arr ,l , m );
             mergeSort(arr, m+1, r);
             
             merge(arr,l,m,r);
         }
    }
}
